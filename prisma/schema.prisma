
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  servers Server[]
  memebers Member[]
  channels Channel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id String @id @default(uuid())
  name String 
  imageUrl String @db.Text
  inviteCode String @unique
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  channels Channel[]
  members Member[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}

enum MemberRole{
  GUEST
  MODERATE
  ADMIN
}

model Member{
id String @id @default(uuid())
role MemberRole @default(GUEST)
profileId String
profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
serverId String
server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
messages       Message[]
directMessages DirectMessage[]
conversationInitiated Conversation[] @relation("memberOne")
conversationRecieved Conversation[] @relation("memberTwo")
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
@@index([profileId])
@@index([serverId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}
model Channel{
  id String @id @default(uuid())
  name String 
  type ChannelType @default(TEXT)
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
  @@index([serverId])
}

model Message{
  id String @id @default(uuid())
  content String @db.Text()
  fileUrl String? @db.Text()
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete:Cascade)
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation{
  id String @id @default(uuid())
  memberOneId String
  memberOne Member @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId String
  memberTwo Member @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage{
  id String @id @default(uuid())
  content String @db.Text()
  fileUrl String @db.Text()
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}